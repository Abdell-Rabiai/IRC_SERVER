+----------------------------------+           
|              IRCServer           |           
|----------------------------------|
| - Serversocket: int              | // socket for listening for new connections
| - serverPort: int                | // port on which the server is listening
| - password: string               | // password for authenticating as clients and operators 
| - clients: vector<Client>        | // vector to store all connected clients
| - operators: vector<Client>      | // vector to store all connected operators
| - channels: vector<Channel>      | // vector to store all channels on the server
| - fdToClient: map<int, Client>   | // map to store the mapping between client socket and client object 
|----------------------------------|           
| + startServer()                  | // starts the server socket and listens for new connections
| + handleEvents()                 | // handles events such as new connections, new messages, and clients leaving        
| - acceptNewConnection()          | // accepts a new connection and adds it to the clients vector          
| - processClientData(Client)      | // processes data received from a client and calls the appropriate methods
| - broadcastMessage(Channel, Msg) | // broadcasts a message to all users in a channel
+----------------------------------+           

## what i did here for the client class is good, but i think it would be a good idea to have a User class 
+----------------------------------+
|              Client              |
|----------------------------------|
| - socketfd: int                  | // socket for communicating with the client
| - nickname: string               | // nickname of the client
| - username: string               | // username of the client
| - isOperator: bool               | // whether the client is an operator
| - isAuthenticated: bool          | // whether the client is authenticated
| - currentChannels: vector<Channel> | // vector to store all channels the client is currently in
| - channelMap: map<string, Channel> | // map to store the mapping between channel name and channel object
|----------------------------------|
| + sendMessageToClient(Msg)       | // sends a message to a specific client
| + sendMessageToChaneel(Msg)      | // sends a message to all users in the current channel
| + joinChannel(Channel)           | // joins a channel
| + setNickname(string)            | // sets the nickname of the client
| + setUsername(string)            | // sets the username of the client
| + authenticate()                 | // authenticates the client as a user or operator 
| + becomeOperator()               | // makes the client an operator
| - processReceivedData(Msg)       | // processes data received from the client and calls the appropriate methods
+----------------------------------+

## from whcih the client and the operator inherits from. The user class would have the common attributes
## sush as socketfd, nickname, username, isOperator, currentChannels, and channelMap.
## this is the base class for the client and operator class
+----------------------------------+
|              IrcUser             |
|----------------------------------|
| - socketfd: int                  | // socket for communicating with the client
| - nickname: string               | // nickname of the client
| - username: string               | // username of the client
| - isOperator: bool               | // whether the user is an operator
| - isAuthenticated: bool          | // whether the user is authenticated
| - currentChannels: vector<Channel> | // vector to store all channels the client is currently in
| - channelMap: map<string, Channel> | // map to store the mapping between channel name and channel object
|----------------------------------|
| + sendMessageToClient(Msg)       | // sends a message to a specific client
| + sendMessageToChaneel(Msg)      | // sends a message to all users in the current channel
| + joinChannel(Channel)           | // joins a channel
| + setNickname(string)            | // sets the nickname of the client
| + setUsername(string)            | // sets the username of the client
| + authenticate()                 | // authenticates the client as a user or operator 
| + becomeOperator()               | // makes the client an operator
| - processReceivedData(Msg)       | // processe data received from the client and calls the appropriate methods
+----------------------------------+
## this is the operator class that inherits from the user class
+----------------------------------+
|              operator            |
|----------------------------------|
| - none at the moment             |
|----------------------------------|
| + kickClient(Client)             | // kicks a client from the server
| + inviteClient(Channel, Client)  | // invites a client to a channel
| + setChannelTopic(Channel, string) | // sets the topic of a channel
| + viewChannelTopic(Channel)      | // views the topic of a channel
| + setChannelMode(Channel, string) | // sets the mode of a channel
| + setInviteOnly(Channel)         | // sets whether a channel is invite only
| + removeInviteOnly(Channel)      | // removes the invite only mode from a channel
| + setRestrictedTopic(Channel)    | // sets whether a channel has a restricted topic to allow only operators to change the topic
| + removeRestrictedTopic(Channel) | // removes the restricted topic mode from a channel to allow anyone to change the topic
| + setChannelKey(Channel, string) | // sets the key of a channel (password)
| + removeChannelKey(Channel)      | // removes the key of a channel
| + giveOperatorPrivileges(Channel, Client) | // gives operator privileges to a certain client
| + removeOperatorPrivileges(Channel, Client) | // removes operator privileges from a certain client
| + setChannelLimit(Channel, int)  | // sets the limit of a channel (maximum number of users)
| + removeChannelLimit(Channel)    | // removes the limit of a channel (allows unlimited number of users)
+----------------------------------+





+----------------------------------+
|             Channel              |
|----------------------------------|
| - name: string                   | // name of the channel
| - topic: string                  | // topic of the channel
| - isInviteOnly: bool             | // whether the channel is invite only
| - isRestrictedTopic: bool        | // whether the channel has a restricted topic
| - limit: int                     | // maximum number of users in the channel
| - key: string                    | // password for joining the 
| - isProtected: bool         | // whether the channel is protected (requires a password to join)
| - isLimited: bool           | // whether the channel has a limit on the number of users
| - users: vector<Client>          | // vector to store all users in the channel
| - usersMap: map<socketfd, Client>| // map to store the mapping between socketfd and client object
| - Oprators: vector<Client>       | // vector to store all operators in the channel
| - operatorsMap: map<socketfd, Client> | // map to store the mapping between socketfd and client object
| - ejectedClients: map<socketfd, Client> | // map to store the mapping between socketfd and client object that is ejected from the channel
|----------------------------------|
| + addUser(Client)                | // adds a user to the channel
| + removeUser(Client)             | // removes a user from the channel
| + addOperator(Client)            | // adds an operator to the channel
| + removeOperator(Client)         | // removes an operator from the channel
| + broadcastMessage(Msg)          | // broadcasts a message to all users in the channel
| + setTopic(string)               | // sets the topic of the channel
| + getTopic()                     | // gets the topic of the channel
| + setInviteOnly()                | // sets the channel to be invite only
| + removeInviteOnly()             | // removes the invite only mode from the channel
| + setRestrictedTopic()           | // sets the channel to have a restricted topic
| + removeRestrictedTopic()        | // removes the restricted topic mode from the channel
| + setKey(string)                 | // sets the key of the channel
| + removeKey()                    | // removes the key of the channel
| + setLimit(int)                  | // sets the limit of the channel
| + removeLimit()                  | // removes the limit of the channel
| + isUserInChannel(Client)        | // checks whether a user is in the channel
| + isOperatorInChannel(Client)    | // checks whether an operator is in the channel
+----------------------------------+


+----------------------------------+
|               Msg                |
|----------------------------------|
| - sender: Client                 | // the client who sent the message
| - content: string                | // the content of the message
| - type: MessageType              | // the type of message (JOIN, LEAVE, PRIVATE_MESSAGE, OPERATOR_COMMAND)  
+----------------------------------+

IRCServe ===> Represents the main IRC server, responsible for handling connections, events
and managing clients and channels.

Client ===> Represents an IRC client connected to the server. It contains information about the client
such as nickname, username, and whether the client is an operator. It also handles sending and receiving messages.

Channel ===> Represents an IRC channel. It keeps track of the channel name and the users currently in the channel.
It has methods for adding and removing users and broadcasting messages to the channel.

Msg ===> Represents an IRC message. It contains information about the sender, content, and type of message.

MessageType  ===> An enumeration representing different types of IRC messages
such as JOIN, LEAVE, PRIVATE_MESSAGE, and OPERATOR_COMMAND.
